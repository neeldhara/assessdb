---
import Layout from '../layouts/Layout.astro';
import { Client } from '@notionhq/client';

// Initialize Notion client
const notion = new Client({
  auth: import.meta.env.NOTION_API_KEY
});

// Get database ID
const databaseId = "23c05d2578808077b28be0afcc89994f";

// Function to summarize problem statements
function summarizeProblemStatement(statement: string, maxLength: number = 100): string {
  if (!statement) return 'No problem statement available.';
  
  // Remove extra whitespace and newlines
  let cleaned = statement.replace(/\s+/g, ' ').trim();
  
  // Remove the "Problem:" prefix if it exists
  if (cleaned.toLowerCase().startsWith('problem:')) {
    cleaned = cleaned.substring(8).trim();
  }
  
  // Truncate to maxLength and add ellipsis if needed
  if (cleaned.length > maxLength) {
    return cleaned.substring(0, maxLength) + '...';
  }
  
  return cleaned;
}

// Function to normalize difficulty values (remove emojis and extra text)
function normalizeDifficulty(difficulty: string): string {
  const cleaned = difficulty.toLowerCase().trim();
  
  // Remove common emojis and extract the actual difficulty level
  if (cleaned.includes('easy')) return 'easy';
  if (cleaned.includes('medium')) return 'medium';
  if (cleaned.includes('hard')) return 'hard';
  
  return 'unknown';
}

// Function to get difficulty color classes
function getDifficultyStyles(difficulty: string): { bg: string, border: string, text: string } {
  const normalizedDifficulty = normalizeDifficulty(difficulty);
  
  switch (normalizedDifficulty) {
    case 'easy':
      return {
        bg: 'bg-green-50 dark:bg-green-900/20',
        border: 'border-green-200 dark:border-green-800',
        text: 'text-green-700 dark:text-green-300'
      };
    case 'medium':
      return {
        bg: 'bg-yellow-50 dark:bg-yellow-900/20',
        border: 'border-yellow-200 dark:border-yellow-800',
        text: 'text-yellow-700 dark:text-yellow-300'
      };
    case 'hard':
      return {
        bg: 'bg-red-50 dark:bg-red-900/20',
        border: 'border-red-200 dark:border-red-800',
        text: 'text-red-700 dark:text-red-300'
      };
    default:
      return {
        bg: 'bg-gray-50 dark:bg-gray-900/20',
        border: 'border-gray-200 dark:border-gray-800',
        text: 'text-gray-700 dark:text-gray-300'
      };
  }
}

let assessments = [];
let error = null;

try {
  // Fetch all pages from the database
  // We know the title property is named 'Title' from our test
  const databasePages = await notion.databases.query({
    database_id: databaseId,
    sorts: [
      {
        property: 'Title',
        direction: 'ascending'
      }
    ]
  });
  
  // Fetch detailed data for each assessment to get problem statements
  assessments = [];
  for (const page of databasePages.results) {
    // Type assertion for page properties
    const pageProps = (page as any).properties;
    const title = pageProps.Title?.title[0]?.plain_text || 'Untitled';
    const problemStatement = pageProps["Problem Statement"]?.rich_text?.[0]?.plain_text || '';
    const difficulty = pageProps.Difficulty?.select?.name || 'Unknown';
    const normalizedDifficulty = normalizeDifficulty(difficulty);
    const summary = summarizeProblemStatement(problemStatement);
    const styles = getDifficultyStyles(difficulty);
    
    assessments.push({
      id: page.id,
      title: title,
      summary: summary,
      difficulty: difficulty,
      normalizedDifficulty: normalizedDifficulty,
      styles: styles
    });
  }
  
  console.log(`Fetched ${assessments.length} assessments`);
} catch (err: any) {
  console.error('Error fetching Notion data:', err);
  error = err.message;
}
---

<Layout title="Assessments">
  <div class="container mx-auto px-4 py-8">
    <div class="text-center mb-12">
      <h1 class="text-3xl md:text-4xl font-bold mb-4">Assessment Problems</h1>
      <p class="text-lg text-gray-600 max-w-3xl mx-auto">
        Browse our collection of programming challenges and assessment problems
      </p>
    </div>
    
    {error ? (
      <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative max-w-3xl mx-auto" role="alert">
        <strong class="font-bold">Error: </strong>
        <span class="block sm:inline">{error}</span>
      </div>
    ) : (
      <div>
        <!-- Search and Filter Section -->
        <div class="max-w-4xl mx-auto mb-8">
          <!-- Search Bar -->
          <div class="max-w-md mx-auto mb-6">
            <div class="relative">
              <input
                type="text"
                id="searchInput"
                placeholder="Search assessments by title..."
                class="w-full px-4 py-2 pl-10 pr-4 text-gray-700 bg-white border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-neutral-800 dark:border-neutral-600 dark:text-white dark:placeholder-gray-400"
              />
              <div class="absolute inset-y-0 left-0 flex items-center pl-3">
                <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m21 21-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>
            </div>
          </div>
          
          <!-- Difficulty Filter Icons -->
          <div class="flex justify-center items-center space-x-4">
            <span class="text-sm font-medium text-gray-600 dark:text-gray-400">Filter by difficulty:</span>
            <button
              id="filterAll"
              class="difficulty-filter active px-3 py-2 rounded-lg text-sm font-medium transition-colors bg-gray-100 text-gray-700 hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
              data-difficulty="all"
            >
              All
            </button>
            <button
              id="filterEasy"
              class="difficulty-filter px-3 py-2 rounded-lg text-sm font-medium transition-colors bg-green-50 text-green-700 hover:bg-green-100 dark:bg-green-900/20 dark:text-green-300 dark:hover:bg-green-900/40 border border-green-200 dark:border-green-800"
              data-difficulty="easy"
            >
              ðŸŸ¢ Easy
            </button>
            <button
              id="filterMedium"
              class="difficulty-filter px-3 py-2 rounded-lg text-sm font-medium transition-colors bg-yellow-50 text-yellow-700 hover:bg-yellow-100 dark:bg-yellow-900/20 dark:text-yellow-300 dark:hover:bg-yellow-900/40 border border-yellow-200 dark:border-yellow-800"
              data-difficulty="medium"
            >
              ðŸŸ¡ Medium
            </button>
            <button
              id="filterHard"
              class="difficulty-filter px-3 py-2 rounded-lg text-sm font-medium transition-colors bg-red-50 text-red-700 hover:bg-red-100 dark:bg-red-900/20 dark:text-red-300 dark:hover:bg-red-900/40 border border-red-200 dark:border-red-800"
              data-difficulty="hard"
            >
              ðŸ”´ Hard
            </button>
          </div>
        </div>
        
        <!-- No Results Message -->
        <div id="noResults" class="hidden text-center py-8">
          <p class="text-gray-500 text-lg">No assessments found matching your search.</p>
        </div>
        
        <!-- Pagination Info -->
        <div id="paginationInfo" class="text-center mb-6">
          <p class="text-sm text-gray-600 dark:text-gray-400">
            Showing <span id="currentPageInfo">1-12</span> of <span id="totalCount">0</span> assessments
          </p>
        </div>
        
        <!-- Assessments Grid -->
        <div id="assessmentsGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {
          assessments.map(assessment => (
            <div class={`assessment-card flex flex-col overflow-hidden rounded border-2 ${assessment.styles.border} ${assessment.styles.bg} text-neutral-500 shadow-lg shadow-neutral-700/5 dark:shadow-neutral-950/50 h-full`} data-difficulty={assessment.normalizedDifficulty}>
              <div class="p-6 flex flex-col h-full">
                <div class="flex justify-between items-start mb-3">
                  <h2 class="text-xl font-semibold flex-grow">
                    <a href={`/assessment/${assessment.id}`} class="assessment-title text-blue-600 hover:underline">
                      {assessment.title}
                    </a>
                  </h2>
                  <span class={`ml-3 px-2 py-1 rounded-full text-xs font-medium ${assessment.styles.text} ${assessment.styles.bg} ${assessment.styles.border} border`}>
                    {assessment.difficulty}
                  </span>
                </div>
                <p class="text-gray-600 mb-4 flex-grow">
                  {assessment.summary}
                </p>
                <a href={`/assessment/${assessment.id}`} class="mt-auto inline-flex items-center text-blue-600 hover:text-blue-800 font-medium">
                  View Details
                  <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </a>
              </div>
            </div>
          ))
        }
        </div>
        
        <!-- Pagination Controls -->
        <div id="paginationControls" class="flex justify-center items-center space-x-4 mt-8">
          <button
            id="prevPage"
            class="px-4 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 hover:text-gray-700 disabled:opacity-50 disabled:cursor-not-allowed dark:bg-gray-800 dark:border-gray-600 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-300"
            disabled
          >
            <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            Previous
          </button>
          
          <div id="pageNumbers" class="flex space-x-2">
            <!-- Page numbers will be dynamically generated -->
          </div>
          
          <button
            id="nextPage"
            class="px-4 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 hover:text-gray-700 disabled:opacity-50 disabled:cursor-not-allowed dark:bg-gray-800 dark:border-gray-600 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-300"
          >
            Next
            <svg class="w-4 h-4 ml-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </div>
      </div>
    )}
  </div>
  
  <style>
    .difficulty-filter.active {
      @apply ring-2 ring-blue-500 bg-blue-100 text-blue-700;
    }
    
    .dark .difficulty-filter.active {
      @apply ring-blue-400 bg-blue-900/40 text-blue-300;
    }
  </style>
  
  <script>
    // Client-side search, filter, and pagination functionality
    document.addEventListener('DOMContentLoaded', function() {
      const searchInput = document.getElementById('searchInput') as HTMLInputElement;
      const assessmentsGrid = document.getElementById('assessmentsGrid');
      const noResults = document.getElementById('noResults');
      const difficultyFilters = document.querySelectorAll('.difficulty-filter');
      const paginationInfo = document.getElementById('paginationInfo');
      const paginationControls = document.getElementById('paginationControls');
      const currentPageInfo = document.getElementById('currentPageInfo');
      const totalCount = document.getElementById('totalCount');
      const prevPageBtn = document.getElementById('prevPage');
      const nextPageBtn = document.getElementById('nextPage');
      const pageNumbers = document.getElementById('pageNumbers');
      
      if (!searchInput || !assessmentsGrid || !noResults) {
        console.error('Required elements not found');
        return;
      }
      
      const assessmentCards = Array.from(assessmentsGrid.querySelectorAll('.assessment-card'));
      let currentSearchTerm = '';
      let currentDifficultyFilter = 'all';
      let currentPage = 1;
      const itemsPerPage = 12;
      
      // Get filtered cards based on current search and difficulty filters
      function getFilteredCards() {
        return assessmentCards.filter(card => {
          const titleElement = card.querySelector('.assessment-title');
          const htmlCard = card as HTMLElement;
          
          if (!titleElement || !titleElement.textContent) return false;
          
          const title = titleElement.textContent.toLowerCase();
          const difficulty = htmlCard.getAttribute('data-difficulty') || '';
          
          // Check if card matches search term
          const matchesSearch = currentSearchTerm === '' || title.includes(currentSearchTerm);
          
          // Check if card matches difficulty filter
          const matchesDifficulty = currentDifficultyFilter === 'all' || difficulty === currentDifficultyFilter;
          
          return matchesSearch && matchesDifficulty;
        });
      }
      
      // Update pagination info and controls
      function updatePagination(filteredCards: Element[]) {
        const totalItems = filteredCards.length;
        const totalPages = Math.ceil(totalItems / itemsPerPage);
        
        // Update pagination info
        if (totalItems === 0) {
          currentPageInfo!.textContent = '0-0';
          totalCount!.textContent = '0';
        } else {
          const startItem = (currentPage - 1) * itemsPerPage + 1;
          const endItem = Math.min(currentPage * itemsPerPage, totalItems);
          currentPageInfo!.textContent = `${startItem}-${endItem}`;
          totalCount!.textContent = totalItems.toString();
        }
        
        // Update pagination controls
        if (prevPageBtn && nextPageBtn) {
          (prevPageBtn as HTMLButtonElement).disabled = currentPage <= 1;
          (nextPageBtn as HTMLButtonElement).disabled = currentPage >= totalPages;
        }
        
        // Generate page numbers
        if (pageNumbers) {
          pageNumbers.innerHTML = '';
          
          // Show pagination only if there are multiple pages
          if (totalPages > 1) {
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
            
            // Adjust start page if we're near the end
            if (endPage - startPage + 1 < maxVisiblePages) {
              startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }
            
            for (let i = startPage; i <= endPage; i++) {
              const pageBtn = document.createElement('button');
              pageBtn.textContent = i.toString();
              pageBtn.className = `px-3 py-2 text-sm font-medium rounded-lg ${
                i === currentPage
                  ? 'bg-blue-600 text-white'
                  : 'text-gray-500 bg-white border border-gray-300 hover:bg-gray-50 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-gray-300'
              }`;
              
              pageBtn.addEventListener('click', () => {
                currentPage = i;
                updateDisplay();
              });
              
              pageNumbers.appendChild(pageBtn);
            }
          }
        }
        
        // Show/hide pagination controls
        if (paginationControls) {
          paginationControls.style.display = totalPages > 1 ? 'flex' : 'none';
        }
        if (paginationInfo) {
          paginationInfo.style.display = totalItems > 0 ? 'block' : 'none';
        }
      }
      
      // Update the display based on current filters and pagination
      function updateDisplay() {
        const filteredCards = getFilteredCards();
        const totalItems = filteredCards.length;
        
        // Hide all cards first
        assessmentCards.forEach(card => {
          (card as HTMLElement).style.display = 'none';
        });
        
        if (totalItems === 0) {
          // Show no results message
          noResults?.classList.remove('hidden');
          assessmentsGrid?.classList.add('hidden');
        } else {
          // Show filtered and paginated cards
          noResults?.classList.add('hidden');
          assessmentsGrid?.classList.remove('hidden');
          
          // Calculate which cards to show for current page
          const startIndex = (currentPage - 1) * itemsPerPage;
          const endIndex = startIndex + itemsPerPage;
          const cardsToShow = filteredCards.slice(startIndex, endIndex);
          
          // Show cards for current page
          cardsToShow.forEach(card => {
            (card as HTMLElement).style.display = 'block';
          });
        }
        
        // Update pagination
        updatePagination(filteredCards);
      }
      
      // Search input event listener
      searchInput.addEventListener('input', function() {
        currentSearchTerm = this.value.toLowerCase().trim();
        currentPage = 1; // Reset to first page when searching
        updateDisplay();
      });
      
      // Difficulty filter event listeners
      difficultyFilters.forEach(filter => {
        filter.addEventListener('click', function(this: HTMLElement) {
          // Remove active class from all filters
          difficultyFilters.forEach(f => f.classList.remove('active'));
          
          // Add active class to clicked filter
          this.classList.add('active');
          
          // Update current difficulty filter
          currentDifficultyFilter = this.getAttribute('data-difficulty') || 'all';
          
          // Reset to first page when filtering
          currentPage = 1;
          
          // Apply filters
          updateDisplay();
        });
      });
      
      // Pagination button event listeners
      prevPageBtn?.addEventListener('click', () => {
        if (currentPage > 1) {
          currentPage--;
          updateDisplay();
        }
      });
      
      nextPageBtn?.addEventListener('click', () => {
        const filteredCards = getFilteredCards();
        const totalPages = Math.ceil(filteredCards.length / itemsPerPage);
        if (currentPage < totalPages) {
          currentPage++;
          updateDisplay();
        }
      });
      
      // Initial display update
      updateDisplay();
    });
  </script>
</Layout>
